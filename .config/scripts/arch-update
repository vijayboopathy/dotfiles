#!/usr/bin/env python3
#
# Copyright (C) 2017 Marcel Patzwahl
# Licensed under the terms of the GNU GPL v3 only.
#
# i3blocks blocklet script to see the available updates of pacman and the AUR
import subprocess
from subprocess import check_output
import argparse
import os
import re


def create_argparse():
    def _default(name, default='', arg_type=str):
        val = default
        if name in os.environ:
            val = os.environ[name]
        return arg_type(val)

    strbool = lambda s: s.lower() in ['t', 'true', '1']
    strlist = lambda s: s.split()

    parser = argparse.ArgumentParser(description='Check for pacman updates')
    parser.add_argument(
        '-b',
        '--base_color',
        default = _default('BASE_COLOR', 'green'),
        help='base color of the output(default=green)'
    )
    parser.add_argument(
        '-u',
        '--updates_available_color',
        default = _default('UPDATE_COLOR', 'yellow'),
        help='color of the output, when updates are available(default=yellow)'
    )
    parser.add_argument(
        '-a',
        '--aur',
        action = 'store_const',
        const = True,
        default = _default('AUR', 'False', strbool),
        help='Include AUR packages. Attn: Yaourt must be installed'
    )
    parser.add_argument(
        '-y',
        '--aur_yay',
        action = 'store_const',
        const = True,
        default = _default('AUR_YAY', 'False', strbool),
        help='Include AUR packages. Attn: Yay must be installed'
    )
    parser.add_argument(
        '-q',
        '--quiet',
        action = 'store_const',
        const = True,
        default = _default('QUIET', 'False', strbool),
        help = 'Do not produce output when system is up to date'
    )
    parser.add_argument(
        '-w',
        '--watch',
        nargs='*',
        default = _default('WATCH', arg_type=strlist),
        help='Explicitly watch for specified packages. '
        'Listed elements are treated as regular expressions for matching.'
    )
    return parser.parse_args()


def get_updates():
    output = ''
    try:
        output = check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # checkupdates exits with 2 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []

    updates = [line.split(' ')[0]
               for line in output.split('\n')
               if line]

    return updates


def get_updates_detailed():
    """Get detailed update information with versions"""
    output = ''
    try:
        output = check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []

    updates = [line.strip() for line in output.split('\n') if line.strip()]
    return updates


def get_aur_yaourt_updates():
    output = ''
    try:
        output = check_output(['yaourt', '-Qua']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # yaourt exits with 1 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 1 and not exc.output):
            raise exc
    if not output:
        return []

    aur_updates = [line.split(' ')[0]
                   for line in output.split('\n')
                   if line.startswith('aur/')]

    return aur_updates

def get_aur_yay_updates():
    output = check_output(['yay', '-Qua']).decode('utf-8')
    if not output:
        return []

    aur_updates = [line.split(' ')[0] for line in output.split('\n') if line]

    return aur_updates


def get_aur_yay_updates_detailed():
    """Get detailed AUR update information with versions"""
    try:
        output = check_output(['yay', '-Qua']).decode('utf-8')
        if not output:
            return []
        updates = [line.strip() for line in output.split('\n') if line.strip()]
        return updates
    except subprocess.CalledProcessError:
        return []


def matching_updates(updates, watch_list):
    matches = set()
    for u in updates:
        for w in watch_list:
            if re.match(w, u):
                matches.add(u)

    return matches


def handle_click_events():
    """Handle click events for i3blocks"""
    button = os.environ.get('BLOCK_BUTTON', '')
    
    if not button:
        return
    
    args = create_argparse()
    
    # Get detailed updates for display
    pacman_updates = get_updates_detailed()
    aur_updates = []
    
    if args.aur_yay:
        aur_updates = get_aur_yay_updates_detailed()
    elif args.aur:
        try:
            aur_output = check_output(['yaourt', '-Qua']).decode('utf-8')
            aur_updates = [line.strip() for line in aur_output.split('\n') 
                          if line.strip() and line.startswith('aur/')]
        except subprocess.CalledProcessError:
            pass
    
    if button == '1':  # Left click - Show update details
        if pacman_updates or aur_updates:
            update_list = []
            if pacman_updates:
                update_list.append("=== Pacman Updates ===")
                update_list.extend(pacman_updates)
            if aur_updates:
                update_list.append("=== AUR Updates ===")
                update_list.extend(aur_updates)
            
            # Create notification with package list
            notification_text = '\n'.join(update_list[:15])  # Limit to 15 lines
            if len(pacman_updates) + len(aur_updates) > 15:
                notification_text += f"\n... and {len(pacman_updates) + len(aur_updates) - 15} more"
            
            # Try multiple notification methods
            notification_sent = False
            
            # Method 1: Try notify-send
            try:
                result = subprocess.run(['notify-send', 'Package Updates Available', 
                                      notification_text, '-t', '10000'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    notification_sent = True
            except (subprocess.TimeoutExpired, subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            # Method 2: Try zenity if notify-send failed
            if not notification_sent:
                try:
                    subprocess.run(['zenity', '--info', '--text', 
                                  f"Package Updates Available\n\n{notification_text}"], 
                                  timeout=2, check=False)
                    notification_sent = True
                except (subprocess.TimeoutExpired, subprocess.CalledProcessError, FileNotFoundError):
                    pass
            
            # Method 3: Fallback - Open terminal with package list
            if not notification_sent:
                try:
                    cmd = f'echo "=== PACKAGE UPDATES AVAILABLE ===" && echo "{notification_text}" && echo && echo "Press Enter to close..." && read'
                    subprocess.Popen(['kitty', '-e', 'bash', '-c', cmd])
                    notification_sent = True
                except:
                    try:
                        subprocess.Popen(['xterm', '-e', f'bash -c "{cmd}"'])
                        notification_sent = True
                    except:
                        pass
            
            # Method 4: Last resort - write to temporary file and show path
            if not notification_sent:
                try:
                    import tempfile
                    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                        f.write("=== PACKAGE UPDATES AVAILABLE ===\n")
                        f.write(notification_text)
                        f.write(f"\n\nTotal: {len(pacman_updates) + len(aur_updates)} updates")
                        print(f"Updates saved to: {f.name}", file=subprocess.sys.stderr)
                except:
                    # If all else fails, just print to stderr for debugging
                    print(f"Left click detected: {len(pacman_updates) + len(aur_updates)} updates available", file=subprocess.sys.stderr)
        else:
            try:
                subprocess.run(['notify-send', 'System Updates', 
                              'No updates available'], check=False, timeout=5)
            except:
                print("No updates available", file=subprocess.sys.stderr)
    
    elif button == '2':  # Middle click - Open terminal with update details
        if pacman_updates or aur_updates:
            cmd = 'echo "=== Available Updates ===" && '
            if pacman_updates:
                cmd += 'echo && echo "Pacman Updates:" && checkupdates && '
            if aur_updates:
                if args.aur_yay:
                    cmd += 'echo && echo "AUR Updates (yay):" && yay -Qua && '
                elif args.aur:
                    cmd += 'echo && echo "AUR Updates (yaourt):" && yaourt -Qua && '
            cmd += 'echo && echo "Press Enter to close..." && read'
            
            try:
                subprocess.Popen(['kitty', '-e', 'bash', '-c', cmd])
            except:
                try:
                    subprocess.Popen(['xterm', '-e', f'bash -c "{cmd}"'])
                except:
                    print("Middle click detected: Could not open terminal", file=subprocess.sys.stderr)
        else:
            try:
                subprocess.Popen(['kitty', '-e', 'bash', '-c', 
                                'echo "No updates available" && sleep 2'])
            except:
                print("No updates available", file=subprocess.sys.stderr)
    



# Handle click events first
handle_click_events()

label = os.environ.get("LABEL","")
message = "{0}<span color='{1}'>{2}</span>"
args = create_argparse()

updates = get_updates()
if args.aur:
    updates += get_aur_yaourt_updates()
elif args.aur_yay:
    updates += get_aur_yay_updates()

update_count = len(updates)
if update_count > 0:
    if update_count == 1:
      info = str(update_count) + ' update available'
      short_info = str(update_count) + ' update'
    else:
      info = str(update_count) + ' updates available'
      short_info = str(update_count) + ' updates'

    matches = matching_updates(updates, args.watch)
    if matches:
        info += ' [{0}]'.format(', '.join(matches))
        short_info += '*'
    print(message.format(label, args.updates_available_color, info))
    print(message.format(label, args.updates_available_color, short_info))
elif not args.quiet:
    print(message.format(label, args.base_color, 'system up to date'))
