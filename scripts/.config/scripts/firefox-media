#!/bin/bash

# Firefox Media Control Block for i3blocks
# Uses raw D-Bus commands (no playerctl dependency)

# Find Firefox MPRIS instance
FIREFOX_INSTANCE=$(dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null | grep -o "org\.mpris\.MediaPlayer2\.firefox[^\"]*" | head -1)

if [[ -z "$FIREFOX_INSTANCE" ]]; then
    echo "🎵 No media"
    exit 0
fi

# Get capability properties
CAN_GO_NEXT=$(dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call --print-reply /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:"org.mpris.MediaPlayer2.Player" string:"CanGoNext" 2>/dev/null | grep -o "boolean [a-z]*" | cut -d' ' -f2)
CAN_GO_PREVIOUS=$(dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call --print-reply /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:"org.mpris.MediaPlayer2.Player" string:"CanGoPrevious" 2>/dev/null | grep -o "boolean [a-z]*" | cut -d' ' -f2)

# Function to get Firefox sink input IDs
get_firefox_sink_inputs() {
    pactl list sink-inputs | grep -B 20 'application.name = "Firefox"' | grep "Sink Input #" | cut -d'#' -f2
}

# Handle click events
case $BLOCK_BUTTON in
    1) # Left click - Play/Pause toggle
        dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause >/dev/null 2>&1
        ;;
    2) # Middle click - Next track (only if supported)
        if [[ "$CAN_GO_NEXT" == "true" ]]; then
            dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next >/dev/null 2>&1
        else
            notify-send "Firefox Media" "Next track not available (single video/live stream)" -t 2000 2>/dev/null || true
        fi
        ;;
    3) # Right click - Previous track (only if supported)
        if [[ "$CAN_GO_PREVIOUS" == "true" ]]; then
            dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous >/dev/null 2>&1
        else
            notify-send "Firefox Media" "Previous track not available (single video/live stream)" -t 2000 2>/dev/null || true
        fi
        ;;
    4) # Scroll up - Volume up (PipeWire/PulseAudio)
        for sink_input in $(get_firefox_sink_inputs); do
            pactl set-sink-input-volume "$sink_input" +5% 2>/dev/null
        done
        ;;
    5) # Scroll down - Volume down (PipeWire/PulseAudio)
        for sink_input in $(get_firefox_sink_inputs); do
            pactl set-sink-input-volume "$sink_input" -5% 2>/dev/null
        done
        ;;
esac

# Get playback status
STATUS=$(dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call --print-reply /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:"org.mpris.MediaPlayer2.Player" string:"PlaybackStatus" 2>/dev/null | grep -o '"[^"]*"$' | tr -d '"')

# Set icon based on status and capabilities
case "$STATUS" in
    "Playing") 
        if [[ "$CAN_GO_NEXT" == "true" || "$CAN_GO_PREVIOUS" == "true" ]]; then
            ICON="🎵"  # Has playlist controls
        else
            ICON="▶️"  # Single video
        fi
        ;;
    "Paused")  
        if [[ "$CAN_GO_NEXT" == "true" || "$CAN_GO_PREVIOUS" == "true" ]]; then
            ICON="⏸️"  # Has playlist controls
        else
            ICON="⏸️"  # Single video paused
        fi
        ;;
    *)         ICON="🎵" ;;
esac

# Get metadata
METADATA=$(dbus-send --session --dest="$FIREFOX_INSTANCE" --type=method_call --print-reply /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:"org.mpris.MediaPlayer2.Player" string:"Metadata" 2>/dev/null)

# Extract title and artist
TITLE=$(echo "$METADATA" | grep -A1 '"xesam:title"' | tail -1 | sed 's/.*string "\(.*\)"/\1/')
ARTIST=$(echo "$METADATA" | grep -A3 '"xesam:artist"' | grep 'string' | tail -1 | sed 's/.*string "\(.*\)"/\1/')

# Limit to 2 words maximum
TITLE_WORDS=($TITLE)
if [[ ${#TITLE_WORDS[@]} -gt 2 ]]; then
    TITLE="${TITLE_WORDS[0]} ${TITLE_WORDS[1]}..."
fi

# Display format - Keep it minimal with just title
echo "$ICON $TITLE" 